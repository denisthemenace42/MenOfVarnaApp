@using Azure.Core
@using MOV.ViewModels.Events
@model PaginatedList<MOV.ViewModels.Events.EventViewModel>

<div class="d-flex justify-content-between align-items-center mb-3" style="margin-top: 20px;">
    <h2>@ViewData["Title"] All Events</h2>
    @if (User?.IsInRole("Admin") ?? false)
    {
        <a asp-controller="Event" asp-action="Add" class="btn btn-primary">
            <i class="fas fa-plus"></i> Add Event
        </a>
    }
</div>

<form id="filterForm" method="get" class="row mb-4">

    <div class="col-md-8">
        <input type="text" class="form-control" id="searchQuery" name="searchQuery"
               value="@ViewContext.HttpContext.Request.Query["searchQuery"].ToString()" placeholder="Search events..." />
    </div>

    <div class="col-md-4 d-flex align-items-center">
        <form method="get" id="filterForm">
            <input type="checkbox" class="form-check-input me-2" id="showUpcoming" name="showUpcoming" value="true"
            @(ViewContext.HttpContext.Request.Query["showUpcoming"].ToString() == "true" ? "checked" : "") />
            <label for="showUpcoming">Show Only Upcoming Events</label>
        </form>
    </div>
</form>

<hr />

<div class="row text-center">
    @foreach (var eventItem in Model.Items)
    {
        <div class="col-md-3 mb-4">
            <div class="card h-100" style="width: 100%;">
                @if (!string.IsNullOrEmpty(eventItem.ImageUrl))
                {
                    <img src="@eventItem.ImageUrl" class="card-img-top" style="max-height: 150px; object-fit: contain;" alt="@eventItem.Name">
                }
                else
                {
                    <img src="~/images/default-image.jpg" class="card-img-top" style="max-height: 150px; object-fit: contain;" alt="No Image Available">
                }

                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">@eventItem.Name</h5>
                    <p class="card-text">@eventItem.Description</p>
                    <p class="card-text"><small>Published on: @eventItem.PublishedOn.ToString("dd/MM/yyyy")</small></p>
                    <div class="d-flex justify-content-between mt-auto">
                        
                            <a asp-controller="Event" asp-action="Details" asp-route-id="@eventItem.Id" class="btn btn-info w-100">
                                <i class="fas fa-info-circle"></i> Details
                            </a>
                        @if (User.Identity.IsAuthenticated && !eventItem.IsAttending && eventItem.IsUpcoming)
                        {
                            <form asp-controller="Event" asp-action="Attend" method="post" class="w-100">
                                <input type="hidden" name="id" value="@eventItem.Id" />
                                <button type="submit" class="btn btn-success w-100">
                                    <i class="fas fa-check"></i> Attend
                                </button>
                            </form>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<hr />

<nav aria-label="Page navigation">
    <ul class="pagination">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageNumber - 1)">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
        }
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@i">@i</a>
            </li>
        }
        @if (Model.HasNextPage)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageNumber + 1)">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
        }
    </ul>
</nav>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const filterForm = document.getElementById('filterForm');
        const searchQueryInput = document.getElementById('searchQuery');
        const showUpcomingCheckbox = document.getElementById('showUpcoming');

        let debounceTimeout;
        const debounce = (func, delay) => {
            return function () {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(func, delay);
            };
        };

        searchQueryInput.addEventListener('input', debounce(() => {
            filterForm.submit();
        }, 500)); 

        showUpcomingCheckbox.addEventListener('change', function () {
            document.getElementById('filterForm').submit();
        });
    });
</script>
